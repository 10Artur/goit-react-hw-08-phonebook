{"version":3,"file":"static/js/71.d9f242b3.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectLoading = state => state.contacts.isLoading;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n        console.log('Calculating visible tasks');\n        return contacts.filter(({ name }) =>\n            name.toLowerCase().trim().includes(filter.toLowerCase())\n        );\n    }\n);","import styled from 'styled-components';\n\nexport const ContactListStyled = styled.ul `\n  margin-top: 15px;\n`;\n\nexport const ContactItemStyled = styled.li `\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  gap: 10px;\n  margin-bottom: 6px;\n`;\n\nexport const ButtonStyled = styled.button `\n  color: white;\n  border: 1px solid red;\n  background-color: transparent;\n  padding: 4px;\n\n  border-radius: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  &:hover {\n    background-color: red;\n  }\n`;\n\nexport const Name = styled.p `\n  width: 48%;\n  background-color: white;\n  padding-left: 8px;\n  padding-top: 2px;\n  padding-bottom: 5px;\n  color: black;\n`;\n\nexport const Number = styled.p `\n  width: 48%;\n  background-color: white;\n  padding-top: 2px;\n  padding-bottom: 5px;\n  padding-left: 8px;\n  color: black;\n`;\n\nexport const HeaderLi = styled.li `\n  display: flex;\n  align-items: center;\n  /* gap: 10px; */\n  margin-bottom: 8px;\n`;\n\nexport const HeaderName = styled.p `\n  width: 50%;\n  background-color: rgb(182, 218, 248);\n  text-align: center;\n  font-size: 18px;\n  font-weight: 500;\n  color: black;\n  padding-top: 10px;\n  padding-bottom: 10px;\n`;","import { useSelector, useDispatch } from 'react-redux';\n\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\nimport {\n  ContactListStyled,\n  ContactItemStyled,\n  ButtonStyled,\n  Name,\n  Number,\n  HeaderLi,\n  HeaderName,\n} from './ContactList.styled';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  const dispatch = useDispatch();\n\n  console.log(contacts);\n\n  return (\n    <ContactListStyled>\n      <HeaderLi>\n        <HeaderName>Name</HeaderName>\n        <HeaderName>Number</HeaderName>\n      </HeaderLi>\n      {contacts.map(({ id, name, number }) => (\n        <ContactItemStyled key={id}>\n          <Name>{name}</Name>\n          <Number>{number}</Number>\n          <ButtonStyled\n            type=\"button\"\n            onClick={() => {\n              dispatch(deleteContact(id));\n            }}\n          >\n            Delete\n          </ButtonStyled>\n        </ContactItemStyled>\n      ))}\n    </ContactListStyled>\n  );\n};\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormStyled = styled(Form)\n`\n  display: flex;\n  align-items: center;\n  gap: 18px;\n  padding: 5px 0 5px;\n`;\n\nexport const LabelStylet = styled.label `\n  /* display: flex; */\n`;\n\nexport const Text = styled.p `\n  color: white;\n`;\n\nexport const FieldStyled = styled(Field)\n`\n  width: 150px;\n  border-radius: 8px;\n  border: 1px solid rgb(31, 51, 50);\n`;\n\nexport const ButtonForm = styled.button `\n  width: 120px;\n  height: 35px;\n  color: white;\n  font-size: 16px;\n  font-weight: 500;\n  background-color: transparent;\n  padding: 2px;\n  border-radius: 8px;\n  border: 1px solid white;\n  margin-top: 15px;\n\n  &:hover {\n    color: #00bfa6;\n    background-color: white;\n  }\n`;\n\nexport const ErrorMess = styled(ErrorMessage)\n`\n  width: 200px;\n  color: red;\n  font-size: 10px;\n`;","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport toast from 'react-hot-toast';\n\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\nimport {\n  FormStyled,\n  LabelStylet,\n  FieldStyled,\n  ButtonForm,\n  ErrorMess,\n  Text,\n} from './ContactForm.styled';\nimport * as Yup from 'yup';\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(\n      1,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d Artagnan'\n    )\n    .required('Please enter a name'),\n  number: Yup.string()\n    .min(\n      7,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Please enter the number'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  // console.log(contacts);\n  const handleSubmit = (values, actions) => {\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase().trim() ===\n            values.name.toLowerCase().trim() ||\n          contact.number.trim() === values.number.trim()\n      )\n    ) {\n      return toast.error('A contact with that name or number already exists');\n    }\n    dispatch(addContact({ ...values }));\n    actions.resetForm();\n    toast.success('Contact added successfully', {\n      duration: 3000,\n    });\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <FormStyled>\n        <LabelStylet>\n          <Text>Name</Text>\n          <FieldStyled type=\"text\" name=\"name\" />\n          <ErrorMess name=\"name\" component=\"div\" />\n        </LabelStylet>\n\n        <LabelStylet>\n          <Text>Number</Text>\n          <FieldStyled type=\"tel\" name=\"number\" />\n          <ErrorMess name=\"number\" component=\"div\" />\n        </LabelStylet>\n\n        <ButtonForm type=\"submit\">Create contact</ButtonForm>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const LabelStyled = styled.label `\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n\nexport const FilterStyled = styled.div `\n  padding: 10px 0 15px;\n`;\n\nexport const Input = styled.input `\n  width: 25%;\n  border-radius: 8px;\n  border: 1px solid rgb(31, 51, 50);\n`;\n\nexport const Title = styled.h4 `\n  color: white;\n`;","import { useDispatch, useSelector } from 'react-redux';\n\nimport { LabelStyled, FilterStyled, Input, Title } from './Filter.styled';\nimport { selectFilter } from '../../redux/contacts/selectors';\nimport { filterContact } from '../../redux/contacts/filtersSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <FilterStyled>\n      <LabelStyled>\n        <Title>Search by name</Title>\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={e => {\n            dispatch(filterContact(e.target.value.toLowerCase().trim()));\n          }}\n        />\n      </LabelStyled>\n    </FilterStyled>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div `\n  background-color: #00bfa6;\n  height: 100vh;\n  padding: 20px;\n`;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContact } from 'redux/contacts/operations';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { Container } from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContact());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n}\n"],"names":["selectLoading","state","contacts","isLoading","selectContacts","items","selectFilter","filter","selectVisibleContacts","createSelector","console","log","_ref","name","toLowerCase","trim","includes","ContactListStyled","styled","_templateObject","_taggedTemplateLiteral","ContactItemStyled","_templateObject2","ButtonStyled","_templateObject3","Name","_templateObject4","Number","_templateObject5","HeaderLi","_templateObject6","HeaderName","_templateObject7","ContactList","useSelector","dispatch","useDispatch","_jsxs","children","_jsx","map","id","number","type","onClick","deleteContact","FormStyled","Form","LabelStylet","Text","FieldStyled","Field","ButtonForm","ErrorMess","ErrorMessage","schema","Yup","shape","min","required","ContactForm","Formik","initialValues","onSubmit","values","actions","find","contact","toast","addContact","_objectSpread","resetForm","duration","validationSchema","component","LabelStyled","FilterStyled","Input","Title","Filter","value","onChange","e","filterContact","target","Container","Contacts","useEffect","fetchContact","Helmet"],"sourceRoot":""}